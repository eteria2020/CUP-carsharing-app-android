buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }
    compile('com.crashlytics.sdk.android:crashlytics-ndk:1.1.6@aar') {
        transitive = true;
    }
    compile project(':circlelayout')
}

apply plugin: 'it.handroix.plugin.buildinfoicon'
apply from: rootProject.file('app/config.gradle')
apply from: rootProject.file('app/dependencies.gradle')
apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId project.APPLICATION_ID
        targetSdkVersion rootProject.ext.targetSdkVersion
        minSdkVersion rootProject.ext.minSdkVersion
        versionCode 102
        versionName "1.0.2"

        multiDexEnabled true
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
            
            testCoverageEnabled true

            applicationIdSuffix ".development"
            resValue "string", "google_map_api_key", "AIzaSyA9fVUH1nET8pjHgceS6lyf65NZPsFnaCo"
            resValue "string", "google_place_api_key", "AIzaSyAnVjGP9ZCkSkBVkrX-5SBdmNW9AwE_Gew"
            resValue "string", "google_direction_api_key", "AIzaSyBEMZPnKaJgmjXnzeWpitYuqBrUtDf_Asg"
        }

        release {
            minifyEnabled true
            signingConfig signingConfigs.release

            ext.betaDistributionReleaseNotesFilePath = "app/fabric/release_note.txt"
            ext.betaDistributionGroupAliasesFilePath = "app/fabric/testers_group.txt"

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            applicationIdSuffix ".eteria"
            resValue "string", "google_map_api_key", "AIzaSyDO5blXgSSM7hvNnsde0qM_rnK7nkdICUA"
            resValue "string", "google_place_api_key", "AIzaSyAnVjGP9ZCkSkBVkrX-5SBdmNW9AwE_Gew"
            resValue "string", "google_direction_api_key", "AIzaSyBEMZPnKaJgmjXnzeWpitYuqBrUtDf_Asg"
        }
    }

    /*
     * Apk Name Beautifier
     */
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def String fileName = project.APK_NAME + "_" + variant.baseName + "_v_" + variant.versionName + "_" + variant.versionCode
            def String apkFileName = fileName + ".apk"
            def String apkZipAlignFileName = fileName + "_zipAlign.apk"
            if (output.zipAlign) {
                output.outputFile = new File(output.outputFile.parent, apkZipAlignFileName)
            }
            output.packageApplication.outputFile = new File(output.packageApplication.outputFile.parent, apkFileName)
        }
    }

    /*
     * Slack Upload Task
     */
    applicationVariants.all{
        if (!it.buildType.debuggable){
            def task = tasks.create("slack${it.name.capitalize()}", UploadSlackTask)
            task.variant = it
            task.dependsOn it.assemble
        }
    }

    /*
     *  Filter useless variants (like "mockRelease")
     */
    android.variantFilter { variant ->
        if(variant.buildType.name == 'release'
                && variant.getFlavors().get(0).name == 'mock') {
            variant.setIgnore(true);
        }
    }

    packagingOptions {
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'LICENSE.txt'
        exclude 'main/AndroidManifest.xml'
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'InvalidPackage'
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

buildInfoIcon {

    builder { ApplicationVariant variant, File iconFile ->

//        def color = "#000000"
//        if (variant.flavorName.toLowerCase().contains("mock")) {
//            color = "#FF0000"
//        }
//        
//        if (variant.flavorName.toLowerCase().contains("mock")) {
//            return customColorRibbonFilter("MOCK", iconFile, color)
//        }
//        else {
            return customColorRibbonFilter(variant.flavorName.toUpperCase(), iconFile, "#000000")
//        }
    }

//    forcedVariantsNames "develRelease"
}

configurations {
    compile.exclude group: 'stax'
    compile.exclude group: 'xpp3'
}

// Log out test results to console
tasks.matching {it instanceof Test}.all {
    testLogging.events = ["failed", "passed", "skipped"]
}

/**
 *
 *      UPLOAD SLACK TASK
 *
 */

import com.android.build.gradle.api.ApplicationVariant
import groovyx.net.http.HTTPBuilder
import groovyx.net.http.Method
import org.apache.http.entity.mime.HttpMultipartMode
import org.apache.http.entity.mime.MultipartEntity
import org.apache.http.entity.mime.content.FileBody
import org.apache.http.entity.mime.content.StringBody

class UploadSlackTask extends DefaultTask {

    @Input
    ApplicationVariant variant;

    @TaskAction
    def action() {
        File apkFile = variant.outputs[0].outputFile
        def http = new HTTPBuilder("https://slack.com/api/files.upload")

        File releaseNote = new File('app/fabric/release_note.txt')
        String releaseNoteContent = new StringBuffer(releaseNote.text.toString())
        String releaseNotesExtra = project.SLACK_EXTRA_MESSAGE

        http.request(Method.POST) { req ->
            requestContentType: "multipart/form-data"
            MultipartEntity multiPartContent = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE)
            multiPartContent.addPart("channels", new StringBody("#" + project.SLACK_CHANNEL))
            multiPartContent.addPart("token", new StringBody(project.SLACK_USER_TOKEN))
            multiPartContent.addPart("file", new FileBody(apkFile))

            // Posto il messaggio solo se almeno uno fra release notes e messagio extra Ã¨ pieno.
            if(! releaseNoteContent.trim().isEmpty() || ! releaseNotesExtra.trim().isEmpty()) {

                if(! releaseNoteContent.trim().isEmpty() && ! releaseNotesExtra.trim().isEmpty()) {
                    releaseNoteContent = releaseNoteContent + "\n"
                }
                releaseNoteContent = releaseNoteContent + releaseNotesExtra

                multiPartContent.addPart("initial_comment", new StringBody(releaseNoteContent))
            }

            req.setEntity(multiPartContent)
            response.success = { resp, reader ->
                if (resp.statusLine.statusCode == 200) {
                    println(reader)
                }
            }
        }
    }
}
crashlytics {
    enableNdk true
    androidNdkOut 'src/main/obj'
    androidNdkLibsOut 'src/main/libs'
}
